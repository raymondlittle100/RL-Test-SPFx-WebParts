import * as React from 'react';
import styles from './SubGrid.module.scss';
import { ISubGridProps, IStepState, IProjectStepsState } from '../InterfaceFiles';
import { escape } from '@microsoft/sp-lodash-subset';

import * as pnp from 'sp-pnp-js';
import * as moment from 'moment';

import { getRTL } from 'office-ui-fabric-react/lib/Utilities';
import { FocusZone, FocusZoneDirection } from 'office-ui-fabric-react/lib/FocusZone';
import { TextField } from 'office-ui-fabric-react/lib/TextField';
import { Image, ImageFit } from 'office-ui-fabric-react/lib/Image';
import { Icon } from 'office-ui-fabric-react/lib/Icon';
import { List } from 'office-ui-fabric-react/lib/List';

// Import React Table
import ReactTable from "react-table";
import "react-table/react-table.css";

export default class ReactListSubGrid extends React.Component<ISubGridProps, IProjectStepsState> {

  //declare private variables
  private web;
  private projectStepsList;

  constructor(props) {
    super(props);

    //set the values of the private variables
    this.web = new pnp.Web(this.props.webUrl);
    this.projectStepsList = this.web.lists.getByTitle(this.props.projectListName);
    
    this.state = {
      allSteps: [],
      loading:true,
      error:"",
      filterText:""
    };

    this._onFilterChanged = this._onFilterChanged.bind(this);    
    this.getProjectSteps = this.getProjectSteps.bind(this);
  }

  public componentDidMount(): void {
    this.getProjectSteps();    
  } 

  private getProjectSteps() {
    try {
      let query = {
        "ViewXml": "<View>" +
                     "<ViewFields>" +
                        "<FieldRef Name='Title' />" +                        
                        "<FieldRef Name='Grouping' />" +   
                        "<FieldRef Name='StepStartDate' />" +   
                        "<FieldRef Name='ProjectDueDate' />" +   
                        "<FieldRef Name='StepEstimatedDuration' />" +   
                        "<FieldRef Name='StepNumber' />" +   
                      "</ViewFields>" +
                      "<OrderBy>" +
                        "<FieldRef Name='StepNumber' />" +
                      "</OrderBy>" +
                    "</View>"
      };
      this.projectStepsList.getItemsByCAMLQuery(query).then((items) => {        
        let steps: IStepState[] = [];
        if(items.length > 0) {
          items.map(item=>{
            let startDate:string="";
            let endDate:string="";
            if(item.StepStartDate != null && item.StepStartDate != "")
            {
              const date:Date =new Date(item.StepStartDate);
              startDate = moment(date).format(this.props.dateFormat);
            }

            if(item.ProjectDueDate != null && item.ProjectDueDate != "")
            {
              const date:Date =new Date(item.ProjectDueDate);
              endDate = moment(date).format(this.props.dateFormat);
            }

            steps.push(
            {
              id: item.Id, 
              title: item.Title,
              grouping:item.Grouping,
              startDate:startDate,
              endDate:endDate,
              effort:item.StepEstimatedDuration 
            });        
          });          
        }
        this.setState({ allSteps : steps, loading:false });
      }).catch(error=>{        
        console.log("Query error with getsteps: ", error.message);    
        this.setState({ error: error.message });            
      });      
    } 
    catch (error) {
      console.log("Catch error with getsteps: " + error.message);
      this.setState({ error: error.message });            
    }
  }

  private _onFilterChanged(text: string) {
    let filteredItems:IStepState[] = this.state.allSteps;
    if(text != "")
    {
      filteredItems = filteredItems.filter((step) =>
        step.title.trim().toLowerCase().indexOf(text.toLowerCase()) >= 0);
    }

    this.setState({
      filterText: text,
      filteredSteps:filteredItems
    });
  }

  private _onRenderCell(item: any, index: number | undefined): JSX.Element {
    return (
      <div className='ms-ListBasicExample-itemCell' data-is-focusable={ true }>
        <Image
          className='ms-ListBasicExample-itemImage'
          src={ item.thumbnail }
          width={ 50 }
          height={ 50 }
          imageFit={ ImageFit.cover }
        />
        <div className='ms-ListBasicExample-itemContent'>
          <div className='ms-ListBasicExample-itemName'>{ item.title }</div>
          <div className='ms-ListBasicExample-itemIndex'>{ `Item ${index}` }</div>
          <div className='ms-ListBasicExample-itemDesc'>{ item.title }</div>
        </div>
        <Icon
          className='ms-ListBasicExample-chevron'
          iconName={ getRTL() ? 'ChevronLeft' : 'ChevronRight' }
        />
      </div>
    );
  }

  public render(): React.ReactElement<ISubGridProps> {     
    if(this.state.error != null && this.state.error !="") 
    {
      return <div>Error: {this.state.error}</div>;
    }
    else
    {
      const items = this.state.filterText == "" ? this.state.allSteps:this.state.filteredSteps;
      
      let resultCountText = items.length === this.state.allSteps.length ? '' : ` (${items.length} of ${this.state.allSteps.length} shown)`;
      
      return (
        <FocusZone direction={ FocusZoneDirection.vertical }>
        <TextField label={ 'Filter by name' + resultCountText } onBeforeChange={ this._onFilterChanged } />
        <List
          items={ items }
          onRenderCell={ this._onRenderCell }
        />
      </FocusZone>
      );
    }
  }
}
